@import 'helpers/colours';
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

// Takes pixel values to generate 'em' font-size & unitless line-height
//
// $base-size - Value to use as the basis for calculating 'em' value. May be the default $base-font-size.
// $this-size - Font-size in pixels we want the result to match
// $line-height - Pixel-based line-height measure
//
@mixin relativetype ($base-size, $this-size, $line-height) {
    font-size: ($this-size/$base-size)*1em;
    line-height: ($line-height/$this-size);
}


// To be used is the 'before' pseudo element to make the container maintain a set ratio. 
// Borrows a bit from https://gist.github.com/brianmcallister/2932463
//
// $ratio - Space separated values for ratio. Example: '16 9' for widescreen, '1 1' for a square
//
@mixin setratio ($ratio: 1 1) {
    @if length($ratio) < 2 or length($ratio) > 2 {
        @warn '$ratio must be a list with two values.';
    }

    content: '';
    display: block;
    padding-top: percentage(nth($ratio, 2) / nth($ratio, 1));
}



/*------------------------------------*\
    $EXTENDS
\*------------------------------------*/

// Use sparingly, just for deunioning layers to improve performance in most cases
%gpu__accelerate {
    -moz-backface-visibility: hidden;
    -ms-backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;

    -moz-perspective: 1000;
    -ms-perspective: 1000;
    -webkit-perspective: 1000;
    perspective: 1000;

    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
}

// Shared sprite source, call by dropping @extend %sprite in your declaration
%sprite {
    background-image: url('/images/sprite.png');
}

.button {
    margin: 10px;
    padding: 6px 12px;
}

a {
    color: $color-primary;
    -webkit-tap-highlight-color: rgba(0,0,0,0); 

    &:hover {
        text-decoration: underline;
    }
}

.hidden {
    display: none;
}

//Down arrow 

$elements: 8;

.down_arrow {
    #outer{
        
        overflow:hidden;
        width: 60px;
        height: 120px;
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-25px);
        
        #inner.square{
            position:absolute;
            left:50%; top:50%;
            transform:translate(-50%, -50%);
            
            span{
                width:60px;
                height:60px;
                border:1px solid rgba(255,255,255,0.3);
                display:block;
                border-radius:0;
                border-right: 0;
                border-bottom: 0;
                opacity:0;
                position:absolute;
                transform:rotate(-135deg);
                transform-origin: top left;
                animation-name: moveDown;
                animation-iteration-count: infinite;
                animation-duration:$elements + s;
                top:0;
            }
        }
    }

    @for $i from 0 to $elements {
      #inner.square span:nth-child(#{$i}) {
            animation-delay: $i*1 + s;
        }
    }

    @keyframes moveDown{
        0%{ top:0; opacity:0;}
        20%{ opacity:0.6;}
        100%{ top:60px; opacity:0;}
    }
}

.fade {
    opacity: 1;
  }